// Copyright 2019 Authors of Cilium
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package loader

import (
	"crypto/sha1"
	"encoding/hex"
	"hash"
	"io"

	"github.com/cilium/cilium/pkg/datapath"
)

var (
	// DatapathSHA is set during build to the SHA generated from bindata.sh
	// which is hashed across all datapath template code, excluding the
	// node, netdev, lxc and sockops header files (see daemon/Makefile).
	DatapathSHA string
)

// Hash represents a unique enumeration of the datapath implementation.
type Hash struct {
	hash.Hash
	datapath.Datapath
}

// NewHash creates a new datapath hash based on the contents of the datapath
// template files under bpf/, generated by contrib/scripts/bindata.sh.
func NewHash(dp datapath.Datapath) *Hash {
	h := sha1.New()
	io.WriteString(h, DatapathSHA)
	return &Hash{
		Datapath: dp,
		Hash:     h,
	}
}

// HashDatapath returns a new datapath hash based on the specified datapath.
func HashDatapath(dp datapath.Datapath, nodeCfg *datapath.LocalNodeConfiguration, netdevCfg datapath.DeviceConfiguration, epCfg datapath.EndpointConfiguration) *Hash {
	h := NewHash(dp)

	// Writes won't fail; it's an in-memory hash.
	if nodeCfg != nil {
		_ = dp.WriteNodeConfig(h, nodeCfg)
	}
	if netdevCfg != nil {
		_ = dp.WriteNetdevConfig(h, netdevCfg)
	}
	if epCfg != nil {
		_ = dp.WriteEndpointConfig(h, epCfg, false)
	}

	return h
}

// Copy the cached mash of the hashed datapath paths.
func (h *Hash) Copy() *Hash {
	newHash := sha1.New()
	io.WriteString(newHash, h.String())
	return &Hash{
		Datapath: h.Datapath,
		Hash:     newHash,
	}
}

// String returns a string representation of the underlying hash.
func (h *Hash) String() string {
	combinedHeaderHashSum := h.Sum(nil)
	return hex.EncodeToString(combinedHeaderHashSum[:])
}

// SumEndpoint returns the hash of the complete datapath for an endpoint.
func (h *Hash) SumEndpoint(epCfg datapath.EndpointConfiguration) string {
	h.Datapath.WriteEndpointConfig(h, epCfg, false)
	return h.String()
}
